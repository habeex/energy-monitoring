// Mocks generated by Mockito 5.4.4 from annotations
// in solar_monitor/test/database/local_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:solar_monitor/data/model/monitoring.dart' as _i4;
import 'package:solar_monitor/data/model/monitoring_type.dart' as _i5;
import 'package:solar_monitor/data/service/local_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocalService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalService extends _i1.Mock implements _i2.LocalService {
  MockLocalService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  List<int> saveAnalyticsReport(List<_i4.Monitoring>? monitoring) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAnalyticsReport,
          [monitoring],
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  List<_i4.Monitoring> getAnalyticsReport(
    String? date,
    _i5.MonitorType? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnalyticsReport,
          [
            date,
            type,
          ],
        ),
        returnValue: <_i4.Monitoring>[],
      ) as List<_i4.Monitoring>);
}
